{"info":{"start":"2025-06-20T15:31:46.789Z","end":"2025-06-20T15:33:18.630Z","_duration":91841,"type":"runner","cid":"0-0","capabilities":{"platformName":"Android","automationName":"UiAutomator2","deviceName":"emulator-5554","platformVersion":"15","app":"D:\\Work\\flutter-app-automation\\apps\\com.anytimeshift.employee.debug.apk","appPackage":"com.anytimeshift.employee","appActivity":".MainActivity","autoGrantPermissions":true,"noReset":false,"newCommandTimeout":30000,"adbExecTimeout":60000,"platform":"LINUX","webStorageEnabled":false,"takesScreenshot":true,"javascriptEnabled":true,"databaseEnabled":false,"networkConnectionEnabled":true,"locationContextEnabled":false,"warnings":{},"desired":{"platformName":"Android","automationName":"UiAutomator2","deviceName":"emulator-5554","platformVersion":"15","app":"D:\\Work\\flutter-app-automation\\apps\\com.anytimeshift.employee.debug.apk","appPackage":"com.anytimeshift.employee","appActivity":".MainActivity","autoGrantPermissions":true,"noReset":false,"newCommandTimeout":30000,"adbExecTimeout":60000},"deviceUDID":"emulator-5554","pixelRatio":"2.625","statBarHeight":136,"viewportRect":{"left":0,"top":136,"width":1080,"height":2264},"deviceApiLevel":35,"deviceManufacturer":"Google","deviceModel":"sdk_gphone64_x86_64","deviceScreenSize":"1080x2400","deviceScreenDensity":420,"sessionId":"31727d1e-4d71-40c6-97d7-2e2ab07cc8c9"},"sanitizedCapabilities":"android.emulator-5554","config":{"protocol":"http","hostname":"127.0.0.1","port":4723,"path":"/","capabilities":{"platformName":"Android","appium:automationName":"UiAutomator2","appium:deviceName":"emulator-5554","appium:platformVersion":"15","appium:app":"D:\\Work\\flutter-app-automation\\apps\\com.anytimeshift.employee.debug.apk","appium:appPackage":"com.anytimeshift.employee","appium:appActivity":".MainActivity","appium:autoGrantPermissions":true,"appium:noReset":false,"appium:newCommandTimeout":30000,"appium:adbExecTimeout":60000},"logLevel":"info","connectionRetryTimeout":120000,"connectionRetryCount":1,"logLevels":{},"enableDirectConnect":true,"strictSSL":true,"requestedCapabilities":{"platformName":"Android","appium:automationName":"UiAutomator2","appium:deviceName":"emulator-5554","appium:platformVersion":"15","appium:app":"D:\\Work\\flutter-app-automation\\apps\\com.anytimeshift.employee.debug.apk","appium:appPackage":"com.anytimeshift.employee","appium:appActivity":".MainActivity","appium:autoGrantPermissions":true,"appium:noReset":false,"appium:newCommandTimeout":30000,"appium:adbExecTimeout":60000},"automationProtocol":"webdriver","waitforInterval":100,"waitforTimeout":10000,"onReload":[],"beforeCommand":[],"afterCommand":[],"rootDir":"D:\\Work\\flutter-app-automation","specs":["file:///D:/Work/flutter-app-automation/test/specs/password-field-test.e2e.js"],"suites":{},"exclude":[],"groupLogsByTestSpec":false,"excludeDriverLogs":[],"bail":0,"framework":"mocha","reporters":["spec",["html-nice",{"outputDir":"./reports/html-reports/","filename":"report.html","reportTitle":"Flutter App Automation Test Report","linkScreenshots":true,"open":true}]],"services":[["appium",{"command":"appium","args":{"address":"127.0.0.1","port":4723,"basePath":"/"}}]],"maxInstances":1,"maxInstancesPerCapability":100,"injectGlobals":true,"filesToWatch":[],"execArgv":[],"runnerEnv":{},"runner":"local","shard":{"current":1,"total":1},"specFileRetries":0,"specFileRetriesDelay":0,"specFileRetriesDeferred":false,"reporterSyncInterval":100,"reporterSyncTimeout":5000,"cucumberFeaturesWithLineNumbers":[],"mochaOpts":{"timeout":150000,"ui":"bdd"},"jasmineOpts":{"defaultTimeoutInterval":10000},"cucumberOpts":{"timeout":10000},"onPrepare":[],"onWorkerStart":[],"onWorkerEnd":[],"before":[],"beforeSession":[],"beforeSuite":[],"beforeHook":[],"beforeTest":[null],"afterTest":[],"afterHook":[],"afterSuite":[],"afterSession":[],"after":[null],"onComplete":[],"beforeAssertion":[],"afterAssertion":[],"beforeFeature":[],"beforeScenario":[],"beforeStep":[null],"afterStep":[],"afterScenario":[],"afterFeature":[],"_":["run","run"],"spec":["D:\\Work\\flutter-app-automation\\test\\specs\\password-field-test.e2e.js","D:\\Work\\flutter-app-automation\\test\\specs\\password-field-test.e2e.js"],"$0":"node_modules\\@wdio\\cli\\bin\\wdio.js","config-path":"./wdio.conf.js","ignoredWorkerServices":[]},"specs":["file:///D:/Work/flutter-app-automation/test/specs/password-field-test.e2e.js"],"sessionId":"31727d1e-4d71-40c6-97d7-2e2ab07cc8c9","isMultiremote":false,"instanceOptions":{"31727d1e-4d71-40c6-97d7-2e2ab07cc8c9":{"protocol":"http","hostname":"127.0.0.1","port":4723,"path":"/","capabilities":{"platformName":"Android","appium:automationName":"UiAutomator2","appium:deviceName":"emulator-5554","appium:platformVersion":"15","appium:app":"D:\\Work\\flutter-app-automation\\apps\\com.anytimeshift.employee.debug.apk","appium:appPackage":"com.anytimeshift.employee","appium:appActivity":".MainActivity","appium:autoGrantPermissions":true,"appium:noReset":false,"appium:newCommandTimeout":30000,"appium:adbExecTimeout":60000},"logLevel":"info","connectionRetryTimeout":120000,"connectionRetryCount":1,"logLevels":{},"enableDirectConnect":true,"strictSSL":true,"requestedCapabilities":{"platformName":"Android","appium:automationName":"UiAutomator2","appium:deviceName":"emulator-5554","appium:platformVersion":"15","appium:app":"D:\\Work\\flutter-app-automation\\apps\\com.anytimeshift.employee.debug.apk","appium:appPackage":"com.anytimeshift.employee","appium:appActivity":".MainActivity","appium:autoGrantPermissions":true,"appium:noReset":false,"appium:newCommandTimeout":30000,"appium:adbExecTimeout":60000},"automationProtocol":"webdriver","waitforInterval":100,"waitforTimeout":10000,"onReload":[],"beforeCommand":[],"afterCommand":[],"rootDir":"D:\\Work\\flutter-app-automation","specs":["file:///D:/Work/flutter-app-automation/test/specs/password-field-test.e2e.js"],"suites":{},"exclude":[],"groupLogsByTestSpec":false,"excludeDriverLogs":[],"bail":0,"framework":"mocha","reporters":["spec",["html-nice",{"outputDir":"./reports/html-reports/","filename":"report.html","reportTitle":"Flutter App Automation Test Report","linkScreenshots":true,"open":true}]],"services":[["appium",{"command":"appium","args":{"address":"127.0.0.1","port":4723,"basePath":"/"}}]],"maxInstances":1,"maxInstancesPerCapability":100,"injectGlobals":true,"filesToWatch":[],"execArgv":[],"runnerEnv":{},"runner":"local","shard":{"current":1,"total":1},"specFileRetries":0,"specFileRetriesDelay":0,"specFileRetriesDeferred":false,"reporterSyncInterval":100,"reporterSyncTimeout":5000,"cucumberFeaturesWithLineNumbers":[],"mochaOpts":{"timeout":150000,"ui":"bdd"},"jasmineOpts":{"defaultTimeoutInterval":10000},"cucumberOpts":{"timeout":10000},"onPrepare":[],"onWorkerStart":[],"onWorkerEnd":[],"before":[],"beforeSession":[],"beforeSuite":[],"beforeHook":[],"beforeTest":[null],"afterTest":[],"afterHook":[],"afterSuite":[],"afterSession":[],"after":[null],"onComplete":[],"beforeAssertion":[],"afterAssertion":[],"beforeFeature":[],"beforeScenario":[],"beforeStep":[null],"afterStep":[],"afterScenario":[],"afterFeature":[],"_":["run","run"],"spec":["D:\\Work\\flutter-app-automation\\test\\specs\\password-field-test.e2e.js","D:\\Work\\flutter-app-automation\\test\\specs\\password-field-test.e2e.js"],"$0":"node_modules\\@wdio\\cli\\bin\\wdio.js","config-path":"./wdio.conf.js","ignoredWorkerServices":[]}},"retry":0,"failures":0,"retries":0},"metrics":{"passed":1,"skipped":0,"failed":0,"duration":91841,"start":"2025-06-20T15:31:46.790Z","end":"2025-06-20T15:33:18Z"},"title":"Flutter App Automation Test Report","suites":[{"start":"2025-06-20T15:31:46.798Z","end":"2025-06-20T15:33:17.473Z","_duration":90675,"type":"suite:start","uid":"suite-0-0","cid":"0-0","file":"D:\\Work\\flutter-app-automation\\test\\specs\\password-field-test.e2e.js","title":"Password Field Test","fullTitle":"Password Field Test","tests":[{"start":"2025-06-20T15:31:46.799Z","end":"2025-06-20T15:33:17.472Z","_duration":90673,"type":"test","uid":"test-00-0","cid":"0-0","title":"should find password field by scrolling and capture source","fullTitle":"Password Field Test.should find password field by scrolling and capture source","output":[],"retries":0,"parent":"Password Field Test","state":"passed","body":"async () => {\n    console.log('üîê Starting Password Field Test');\n    \n    // Wait for app to load\n    await driver.pause(3000);\n    \n    // Handle First Name field first\n    console.log('\\nüë§ Testing First Name field...');\n    \n    try {\n      // Find First Name field by looking for the EditText with first name hint\n      const firstNameField = await $('//android.widget.EditText[@hint=\"e.g. John\"]');\n      if (await firstNameField.isDisplayed()) {\n        console.log('‚úÖ First Name field found');\n        \n        // Test first name field interaction\n        await firstNameField.click();\n        await driver.pause(500);\n        await firstNameField.clearValue();\n        await driver.pause(500);\n        await firstNameField.setValue('John');\n        await driver.pause(1000);\n        \n        console.log('‚úÖ First Name field interaction completed');\n        \n        // Click on \"Registration\" text at the top to exit editing mode\n        console.log('\\nüì± Clicking on Registration text to exit editing mode...');\n        try {\n          const registrationText = await $('~Registration');\n          await registrationText.click();\n          await driver.pause(1000);\n          console.log('‚úÖ Clicked on Registration text to exit editing mode');\n        } catch (error) {\n          console.log('‚ö†Ô∏è Could not click on Registration text:', error.message);\n        }\n        \n      } else {\n        console.log('‚ö†Ô∏è First Name field not found');\n      }\n    } catch (error) {\n      console.log('‚ö†Ô∏è Error filling First Name field:', error.message);\n    }\n    \n    // Handle Last Name field\n    console.log('\\nüë§ Testing Last Name field...');\n    \n    try {\n      // Find Last Name field by looking for the EditText with last name hint\n      const lastNameField = await $('//android.widget.EditText[@hint=\"e.g. Doe\"]');\n      if (await lastNameField.isDisplayed()) {\n        console.log('‚úÖ Last Name field found');\n        \n        // Test last name field interaction\n        await lastNameField.click();\n        await driver.pause(500);\n        await lastNameField.clearValue();\n        await driver.pause(500);\n        await lastNameField.setValue('Doe');\n        await driver.pause(1000);\n        \n        console.log('‚úÖ Last Name field interaction completed');\n        \n        // Click on \"Registration\" text at the top to exit editing mode\n        console.log('\\nüì± Clicking on Registration text to exit editing mode...');\n        try {\n          const registrationText = await $('~Registration');\n          await registrationText.click();\n          await driver.pause(1000);\n          console.log('‚úÖ Clicked on Registration text to exit editing mode');\n        } catch (error) {\n          console.log('‚ö†Ô∏è Could not click on Registration text:', error.message);\n        }\n        \n      } else {\n        console.log('‚ö†Ô∏è Last Name field not found');\n      }\n    } catch (error) {\n      console.log('‚ö†Ô∏è Error filling Last Name field:', error.message);\n    }\n    \n    // Handle Email Address field first\n    console.log('\\nüìß Testing Email Address field...');\n    \n    try {\n      // Find Email Address field by looking for the EditText with email hint\n      const emailField = await $('//android.widget.EditText[@hint=\"e.g. johndoe@mail.com\"]');\n      if (await emailField.isDisplayed()) {\n        console.log('‚úÖ Email Address field found');\n        \n        // Test email field interaction\n        await emailField.click();\n        await driver.pause(500);\n        await emailField.clearValue();\n        await driver.pause(500);\n        await emailField.setValue('test@example.com');\n        await driver.pause(1000);\n        \n        console.log('‚úÖ Email field interaction completed');\n        \n        // Click on \"Registration\" text at the top to exit editing mode\n        console.log('\\nüì± Clicking on Registration text to exit editing mode...');\n        try {\n          const registrationText = await $('~Registration');\n          await registrationText.click();\n          await driver.pause(1000);\n          console.log('‚úÖ Clicked on Registration text to exit editing mode');\n        } catch (error) {\n          console.log('‚ö†Ô∏è Could not click on Registration text:', error.message);\n        }\n        \n      } else {\n        console.log('‚ö†Ô∏è Email Address field not found');\n      }\n    } catch (error) {\n      console.log('‚ö†Ô∏è Error filling Email Address field:', error.message);\n    }\n    \n    // Test Phone Number field first\n    console.log('\\nüìû Testing Phone Number field...');\n    \n    try {\n      // Find Phone Number field\n      const phoneField = await $('//android.widget.EditText[@hint=\"+1 \\n9876543210\"]');\n      if (await phoneField.isDisplayed()) {\n        console.log('‚úÖ Phone Number field found');\n        \n        // Click on the field\n        await phoneField.click();\n        await driver.pause(500);\n        console.log('‚úÖ Phone field clicked');\n        \n        // Clear and enter phone number\n        await phoneField.clearValue();\n        await phoneField.setValue('5551234567');\n        await driver.pause(1000);\n        console.log('‚úÖ Phone number entered: 5551234567');\n        \n        // Click on Registration header to exit\n        const registrationText = await $('~Registration');\n        await registrationText.click();\n        await driver.pause(1000);\n        console.log('‚úÖ Clicked on Registration text to exit');\n        \n        console.log('‚úÖ Phone Number Field Test completed successfully');\n        \n      } else {\n        console.log('‚ùå Phone Number field not found');\n      }\n    } catch (error) {\n      console.log('‚ùå Error testing Phone Number field:', error.message);\n    }\n    \n    // First, handle Address field on main screen\n    console.log('\\nüè† Testing Address field...');\n    \n    try {\n      // Find Address field by looking for the EditText with \"Street Address\" hint\n      const addressField = await $('//android.widget.EditText[@hint=\"Street Address\"]');\n      if (await addressField.isDisplayed()) {\n        console.log('‚úÖ Address field found');\n        \n        // Test address field interaction\n        await addressField.click();\n        await driver.pause(500);\n        await addressField.clearValue();\n        await driver.pause(500);\n        await addressField.setValue('123 Main Street, Apt 4B');\n        await driver.pause(1000);\n        \n        console.log('‚úÖ Address field interaction completed');\n        \n        // Click on \"Registration\" text at the top to exit editing mode\n        console.log('\\nüì± Clicking on Registration text to exit editing mode...');\n        try {\n          const registrationText = await $('~Registration');\n          await registrationText.click();\n          await driver.pause(1000);\n          console.log('‚úÖ Clicked on Registration text to exit editing mode');\n        } catch (error) {\n          console.log('‚ö†Ô∏è Could not click on Registration text:', error.message);\n        }\n        \n      } else {\n        console.log('‚ö†Ô∏è Address field not found');\n      }\n    } catch (error) {\n      console.log('‚ö†Ô∏è Error filling Address field:', error.message);\n    }\n    \n    // First, verify Country field is set to United States and not editable\n    console.log('\\nüåç Verifying Country field...');\n    \n    try {\n      const countryField = await $('//android.view.View[@text=\"United States\"]');\n      if (await countryField.isDisplayed()) {\n        console.log('‚úÖ Country field found and set to \"United States\"');\n        \n        // Verify it's not editable (should be disabled)\n        const isEnabled = await countryField.getAttribute('enabled');\n        if (isEnabled === 'false') {\n          console.log('‚úÖ Country field is correctly disabled (not editable)');\n        } else {\n          console.log('‚ö†Ô∏è Country field appears to be editable');\n        }\n      } else {\n        console.log('‚ö†Ô∏è Country field not found or not set to \"United States\"');\n      }\n    } catch (error) {\n      console.log('‚ö†Ô∏è Error verifying Country field:', error.message);\n    }\n    \n    // First, test SSN/TIN field - it's visible after first scroll\n    console.log('\\nüÜî Testing SSN/TIN field first...');\n    \n    // Scroll down once to bring SSN/TIN field into view\n    console.log('üîÑ Scrolling down to bring SSN/TIN field into view...');\n    \n    await driver.performActions([{\n      type: 'pointer',\n      id: 'finger1',\n      parameters: { pointerType: 'touch' },\n      actions: [\n        { type: 'pointerMove', duration: 0, x: 540, y: 1800 },\n        { type: 'pointerDown', button: 0 },\n        { type: 'pause', duration: 100 },\n        { type: 'pointerMove', duration: 1000, x: 540, y: 600 },\n        { type: 'pointerUp', button: 0 }\n      ]\n    }]);\n    await driver.releaseActions();\n    await driver.pause(1500);\n    \n    // UPDATED STATE DROPDOWN LOGIC - using working approach from state-dropdown-test.e2e.js\n    console.log('\\nüèõÔ∏è Testing State dropdown...');\n    \n    try {\n      // Use the exact content-desc from page source (working approach)\n      const stateDropdown = await $('~Select State');\n      await stateDropdown.waitForDisplayed({ timeout: 10000});\n      console.log('‚úÖ State dropdown found and displayed');\n      \n      // Click the State dropdown\n      await stateDropdown.click();\n      console.log('‚úÖ State dropdown clicked');\n      await driver.pause(5000);\n      \n      // Look for dropdown options using content-desc (as seen in page source)\n      const stateOptions = await $$('android=new UiSelector().className(\"android.view.View\").clickable(true)');\n      console.log(`üîç Found ${stateOptions.length} potential state options`);\n      \n      // Filter for actual state options (those with content-desc containing state names)\n      const availableStates = [];\n      for (let i = 0; i < stateOptions.length; i++) {\n        try {\n          const contentDesc = await stateOptions[i].getAttribute('content-desc');\n          if (contentDesc && contentDesc.length > 0 && contentDesc !== 'Scrim') {\n            availableStates.push({\n              element: stateOptions[i],\n              name: contentDesc\n            });\n          }\n        } catch (error) {\n          // Skip elements that don't have content-desc\n        }\n      }\n      \n      console.log(`üìã Available states: ${availableStates.map(s => s.name).join(', ')}`);\n      \n      if (availableStates.length > 0) {\n        // Select a random state (or the first one)\n        const selectedStateIndex = Math.floor(Math.random() * availableStates.length);\n        const selectedState = availableStates[selectedStateIndex];\n        \n        await selectedState.element.click();\n        console.log(`‚úÖ Selected State: ${selectedState.name}`);\n      } else {\n        console.log('‚ö†Ô∏è No state options found with content-desc');\n        \n        // Fallback: try to click any clickable option\n        const clickableOptions = await $$('android=new UiSelector().className(\"android.view.View\").clickable(true)');\n        if (clickableOptions.length > 0) {\n          // Skip the first one (usually the scrim/overlay)\n          const optionToClick = clickableOptions.length > 1 ? clickableOptions[1] : clickableOptions[0];\n          await optionToClick.click();\n          console.log('‚úÖ Selected a state option (fallback method)');\n        } else {\n          console.log('‚ùå No clickable options found');\n        }\n      }\n      \n    } catch (error) {\n      console.log('‚ùå Failed to interact with State dropdown:', error.message);\n    }\n\n    // Handle City dropdown that may appear after State selection\n    console.log('\\nüèôÔ∏è Checking for City dropdown after State selection...');\n    await driver.pause(5000); // Wait for City dropdown to appear\n    \n    try {\n      const cityDropdown = await $('~Select City');\n      if (await cityDropdown.isDisplayed()) {\n        console.log('‚úÖ City dropdown found, selecting city...');\n        await cityDropdown.click();\n        await driver.pause(10000);\n        const cityOptions = await $$('android=new UiSelector().className(\"android.view.View\").clickable(true)');\n        console.log(`üîç Found ${cityOptions.length} potential city options`);\n        \n        // Filter for actual city options\n        const availableCities = [];\n        for (let i = 0; i < cityOptions.length; i++) {\n          try {\n            const contentDesc = await cityOptions[i].getAttribute('content-desc');\n            if (contentDesc && contentDesc.length > 0 && contentDesc !== 'Scrim') {\n              availableCities.push({\n                element: cityOptions[i],\n                name: contentDesc\n              });\n            }\n          } catch (error) {\n            // Skip elements that don't have content-desc\n          }\n        }\n        \n        console.log(`üìã Available cities: ${availableCities.map(c => c.name).join(', ')}`);\n        \n        if (availableCities.length > 0) {\n          // Select a random city (or the first one)\n          const selectedCityIndex = Math.floor(Math.random() * availableCities.length);\n          const selectedCity = availableCities[selectedCityIndex];\n          \n          await selectedCity.element.click();\n          console.log(`‚úÖ Selected City: ${selectedCity.name}`);\n        } else {\n          console.log('‚ö†Ô∏è No city options found with content-desc');\n          \n          // Fallback: try to click any clickable option\n          const clickableOptions = await $$('android=new UiSelector().className(\"android.view.View\").clickable(true)');\n          if (clickableOptions.length > 0) {\n            const optionToClick = clickableOptions.length > 1 ? clickableOptions[1] : clickableOptions[0];\n            await optionToClick.click();\n            console.log('‚úÖ Selected a city option (fallback method)');\n          } else {\n            console.log('‚ùå No clickable city options found');\n          }\n        }\n      } else {\n        console.log('‚ÑπÔ∏è City dropdown not found after state selection - this is normal for some states');\n      }\n    } catch (error) {\n      console.log('‚ÑπÔ∏è City dropdown not present - this is normal for some states');\n    }\n    \n    // First, handle Zip field - it should be visible after this scroll\n    console.log('\\nüìÆ Testing Zip Code field...');\n    \n    // Try to find zip field using the same approach as SSN/TIN\n    let zipField = null;\n    try {\n      // Find Zip Code field by looking for the EditText after the \"Zip Code *\" label\n      const zipLabel = await $('//android.view.View[@content-desc=\"Zip Code *\"]');\n      if (await zipLabel.isDisplayed()) {\n        console.log('‚úÖ Zip Code label found');\n        \n        // Find the EditText that follows this label\n        zipField = await $('//android.view.View[@content-desc=\"Zip Code *\"]/following-sibling::android.widget.EditText[1]');\n        if (await zipField.isDisplayed()) {\n          console.log('üìù Found Zip Code field using content-desc locator');\n          \n          // Test zip field interaction\n          await zipField.click();\n          await driver.pause(500);\n          await zipField.clearValue();\n          await driver.pause(500);\n          await zipField.setValue('12345');\n          await driver.pause(1000);\n          \n          console.log('‚úÖ Zip field interaction completed');\n        } else {\n          console.log('‚ö†Ô∏è Zip Code field not found after label');\n        }\n      } else {\n        console.log('‚ö†Ô∏è Zip Code label not found after first scroll');\n      }\n    } catch (error) {\n      console.log('‚ö†Ô∏è Error filling Zip Code:', error.message);\n    }\n    \n    // Test SSN/TIN field using the correct logic from fill-and-submit-registration-form.e2e.js\n    console.log('üÜî Looking for SSN/TIN field...');\n    \n    try {\n      // Find SS#/TIN# field by looking for the EditText after the \"SS#/TIN# *\" label\n      const ssnLabel = await $('//android.view.View[@content-desc=\"SS#/TIN# *\"]');\n      if (await ssnLabel.isDisplayed()) {\n        console.log('‚úÖ SS#/TIN# label found');\n        \n        // Find the EditText that follows this label - it's the next EditText after the label\n        const ssnField = await $('//android.view.View[@content-desc=\"SS#/TIN# *\"]/following-sibling::android.widget.EditText[1]');\n        if (await ssnField.isDisplayed()) {\n          console.log('üìù Found SS#/TIN# field using content-desc locator');\n          \n          // Click on SSN/TIN field\n          await ssnField.click();\n          await driver.pause(500);\n          \n          // Clear and enter SSN/TIN\n          await ssnField.clearValue();\n          await driver.pause(500);\n          await ssnField.clearValue();\n          await ssnField.setValue('123-45-6789');\n          await driver.pause(1000);\n          \n          console.log('‚úÖ SS#/TIN# filled successfully: 123-45-6789');\n          \n          // Simple validation - just check if we can still find the SS#/TIN# label\n          const stillOnForm = await $('//android.view.View[@content-desc=\"SS#/TIN# *\"]').isDisplayed().catch(() => false);\n          if (!stillOnForm) {\n            console.log('‚ö†Ô∏è Form may have navigated away after SSN/TIN entry');\n          } else {\n            console.log('‚úÖ Form still visible after SSN/TIN entry');\n          }\n          \n        } else {\n          console.log('‚ö†Ô∏è SS#/TIN# field not found after label');\n        }\n      } else {\n        console.log('‚ö†Ô∏è SS#/TIN# label not found after first scroll');\n      }\n    } catch (error) {\n      console.log('‚ö†Ô∏è Error filling SS#/TIN#:', error.message);\n    }\n    \n    // Now test Residence Status dropdown\n    console.log('\\nüìã Testing Residence Status dropdown...');\n    \n    // Scroll down multiple times to bring Residence Status dropdown into view\n    console.log('üîÑ Scrolling to bring Residence Status dropdown into view...');\n    \n    // Second scroll to go further down\n    await driver.performActions([{\n      type: 'pointer',\n      id: 'finger1',\n      parameters: { pointerType: 'touch' },\n      actions: [\n        { type: 'pointerMove', duration: 0, x: 540, y: 1800 },\n        { type: 'pointerDown', button: 0 },\n        { type: 'pause', duration: 100 },\n        { type: 'pointerMove', duration: 1000, x: 540, y: 600 },\n        { type: 'pointerUp', button: 0 }\n      ]\n    }]);\n    await driver.releaseActions();\n    await driver.pause(1500);\n\n    // Third scroll to ensure we're at the bottom\n    await driver.performActions([{\n      type: 'pointer',\n      id: 'finger1',\n      parameters: { pointerType: 'touch' },\n      actions: [\n        { type: 'pointerMove', duration: 0, x: 540, y: 1800 },\n        { type: 'pointerDown', button: 0 },\n        { type: 'pause', duration: 100 },\n        { type: 'pointerMove', duration: 1000, x: 540, y: 600 },\n        { type: 'pointerUp', button: 0 }\n      ]\n    }]);\n    await driver.releaseActions();\n    await driver.pause(2000);\n    \n    // Try to find Residence Status dropdown using different locators\n    let residenceDropdown = null;\n    \n    // Try content-desc first\n    try {\n      residenceDropdown = await $('~Select Residence Status');\n      await residenceDropdown.waitForDisplayed({ timeout: 5000});\n      console.log('‚úÖ Residence Status dropdown found using content-desc');\n    } catch (error) {\n      console.log('‚ö†Ô∏è Not found with content-desc, trying hint text...');\n      // Try hint text\n      try {\n        residenceDropdown = await $('android=new UiSelector().text(\"Select Residence Status\")');\n        await residenceDropdown.waitForDisplayed({ timeout: 5000});\n        console.log('‚úÖ Residence Status dropdown found using text');\n      } catch (error2) {\n        console.log('‚ö†Ô∏è Not found with text, trying hint...');\n        // Try hint\n        try {\n          residenceDropdown = await $('android=new UiSelector().textContains(\"Residence\")');\n          await residenceDropdown.waitForDisplayed({ timeout: 5000});\n          console.log('‚úÖ Residence Status dropdown found using textContains');\n        } catch (error3) {\n          console.log('‚ùå Residence Status dropdown not found with any locator');\n        }\n      }\n    }\n    \n    if (residenceDropdown && await residenceDropdown.isDisplayed()) {\n      // Click the Residence Status dropdown\n      await residenceDropdown.click();\n      console.log('‚úÖ Residence Status dropdown clicked');\n      await driver.pause(5000);\n      \n      // Look for dropdown options using content-desc (as seen in page source)\n      const residenceOptions = await $$('android=new UiSelector().className(\"android.view.View\").clickable(true)');\n      console.log(`üîç Found ${residenceOptions.length} potential residence options`);\n      \n      // Filter for actual residence options (those with content-desc containing residence status names)\n      const availableResidenceStatuses = [];\n      for (let i = 0; i < residenceOptions.length; i++) {\n        try {\n          const contentDesc = await residenceOptions[i].getAttribute('content-desc');\n          if (contentDesc && contentDesc.length > 0 && contentDesc !== 'Scrim') {\n            availableResidenceStatuses.push({\n              element: residenceOptions[i],\n              name: contentDesc\n            });\n          }\n        } catch (error) {\n          // Skip elements that don't have content-desc\n        }\n      }\n      \n      console.log(`üìã Available residence statuses: ${availableResidenceStatuses.map(s => s.name).join(', ')}`);\n      \n      if (availableResidenceStatuses.length > 0) {\n        // Select a random residence status (or the first one)\n        const selectedResidenceIndex = Math.floor(Math.random() * availableResidenceStatuses.length);\n        const selectedResidence = availableResidenceStatuses[selectedResidenceIndex];\n        \n        await selectedResidence.element.click();\n        console.log(`‚úÖ Selected Residence Status: ${selectedResidence.name}`);\n      } else {\n        console.log('‚ö†Ô∏è No residence status options found with content-desc');\n        \n        // Fallback: try to click any clickable option\n        const clickableOptions = await $$('android=new UiSelector().className(\"android.view.View\").clickable(true)');\n        if (clickableOptions.length > 0) {\n          // Skip the first one (usually the scrim/overlay)\n          const optionToClick = clickableOptions.length > 1 ? clickableOptions[1] : clickableOptions[0];\n          await optionToClick.click();\n          console.log('‚úÖ Selected a residence status option (fallback method)');\n        } else {\n          console.log('‚ùå No clickable options found');\n        }\n      }\n    } else {\n      console.log('‚ùå Residence Status dropdown not found or not visible');\n    }\n    \n    // Now scroll down to find password field\n    console.log('\\nüìú Looking for password field...');\n    \n    // First try to find password field without scrolling\n    const passwordSelectors = [\n      '~Password',\n      '~password',\n      '//android.widget.EditText[@hint=\"Password\"]',\n      '//android.widget.EditText[@hint=\"********\"]',\n      '//android.widget.EditText[@password=\"true\"]'\n    ];\n\n    let passwordField = null;\n    \n    // Try all selectors without scrolling first\n    for (const selector of passwordSelectors) {\n      try {\n        passwordField = await $(selector);\n        if (await passwordField.isDisplayed()) {\n          console.log(`‚úÖ Password field found with selector: ${selector}`);\n          break;\n        }\n      } catch (error) {\n        // Continue to next selector\n      }\n    }\n\n    // If password field not found, do a single scroll to bring all fields into view\n    if (!passwordField || !(await passwordField.isDisplayed())) {\n      console.log('üîÑ Scrolling once to bring all fields into view...');\n      \n      await driver.performActions([{\n        type: 'pointer',\n        id: 'finger1',\n        parameters: { pointerType: 'touch' },\n        actions: [\n          { type: 'pointerMove', duration: 0, x: 540, y: 1800 },\n          { type: 'pointerDown', button: 0 },\n          { type: 'pause', duration: 100 },\n          { type: 'pointerMove', duration: 1000, x: 540, y: 600 },\n          { type: 'pointerUp', button: 0 }\n        ]\n      }]);\n      await driver.pause(1500);\n\n      // Try all selectors again after scroll\n      for (const selector of passwordSelectors) {\n        try {\n          passwordField = await $(selector);\n          if (await passwordField.isDisplayed()) {\n            console.log(`‚úÖ Password field found with selector: ${selector} after scroll`);\n            break;\n          }\n        } catch (error) {\n          // Continue to next selector\n        }\n      }\n    }\n    \n    // Try finding password field again after scroll\n    if (!passwordField) {\n      console.log('üîÑ Trying password field selectors again after scroll...');\n      for (const selector of passwordSelectors) {\n        try {\n          passwordField = await $(selector);\n          if (await passwordField.isDisplayed()) {\n            console.log(`‚úÖ Password field found with selector: ${selector} after retry`);\n            break;\n          }\n        } catch (error) {\n          // Continue to next selector\n        }\n      }\n    }\n    \n    if (!passwordField) {\n      console.log('‚ùå Password field not found after scrolling');\n    } else {\n      console.log('‚úÖ Password field found and ready for interaction');\n      \n      // Test password field interaction\n      await passwordField.click();\n      await driver.pause(500);\n      await passwordField.setValue('TestPassword123');\n      await driver.pause(1000);\n      \n      // Close keyboard after password field\n      await driver.hideKeyboard();\n      await driver.pause(500);\n      console.log('‚úÖ Password field interaction completed and keyboard closed');\n      \n      // Now look for confirm password field\n      console.log('\\nüîê Looking for confirm password field...');\n      let confirmPasswordField = null;\n      \n      const confirmSelectors = [\n        '~Confirm Password',\n        '~confirm password',\n        '~ConfirmPassword',\n        '//android.widget.EditText[@hint=\"Confirm Password\"]',\n        '//android.widget.EditText[@hint=\"********\"]',\n        '//android.widget.EditText[@content-desc=\"Confirm Password\"]'\n      ];\n      \n      // Try to find confirm password field\n      for (const selector of confirmSelectors) {\n        try {\n          confirmPasswordField = await $(selector);\n          if (await confirmPasswordField.isDisplayed()) {\n            console.log(`‚úÖ Confirm password field found with selector: ${selector}`);\n            break;\n          }\n        } catch (error) {\n          // Continue to next selector\n        }\n      }\n      \n      // If confirm password field not found, scroll more\n      if (!confirmPasswordField || !(await confirmPasswordField.isDisplayed())) {\n        console.log('üîÑ Scrolling more to find confirm password field...');\n        \n        await driver.performActions([{\n          type: 'pointer',\n          id: 'finger1',\n          parameters: { pointerType: 'touch' },\n          actions: [\n            { type: 'pointerMove', duration: 0, x: 540, y: 1800 },\n            { type: 'pointerDown', button: 0 },\n            { type: 'pause', duration: 100 },\n            { type: 'pointerMove', duration: 1000, x: 540, y: 600 },\n            { type: 'pointerUp', button: 0 }\n          ]\n        }]);\n        await driver.pause(1500);\n        \n        // Try confirm password selectors again\n        for (const selector of confirmSelectors) {\n          try {\n            confirmPasswordField = await $(selector);\n            if (await confirmPasswordField.isDisplayed()) {\n              console.log(`‚úÖ Confirm password field found with selector: ${selector} after scroll`);\n              break;\n            }\n          } catch (error) {\n            // Continue to next selector\n          }\n        }\n      }\n      \n      // Test confirm password field interaction\n      if (confirmPasswordField && await confirmPasswordField.isDisplayed()) {\n        console.log('‚úÖ Confirm password field found and ready for interaction');\n        \n        await confirmPasswordField.click();\n        await driver.pause(500);\n        await confirmPasswordField.setValue('TestPassword123');\n        await driver.pause(1000);\n        \n        // Close keyboard after confirm password field\n        await driver.hideKeyboard();\n        await driver.pause(500);\n        console.log('‚úÖ Confirm password field interaction completed and keyboard closed');\n      } else {\n        console.log('‚ùå Confirm password field not found');\n      }\n      \n      // Now verify register button is visible\n      console.log('\\nüîò Looking for register button...');\n      let registerButton = null;\n      \n      const registerButtonSelectors = [\n        '~Register',\n        '~register',\n        '~Submit',\n        '~submit',\n        '//android.widget.Button[@text=\"Register\"]',\n        '//android.widget.Button[@text=\"Submit\"]',\n        '//android.widget.Button[contains(@text, \"Register\")]',\n        '//android.widget.Button[contains(@text, \"Submit\")]'\n      ];\n      \n      // Try to find register button\n      for (const selector of registerButtonSelectors) {\n        try {\n          registerButton = await $(selector);\n          if (await registerButton.isDisplayed()) {\n            console.log(`‚úÖ Register button found with selector: ${selector}`);\n            break;\n          }\n        } catch (error) {\n          // Continue to next selector\n        }\n      }\n      \n      // If register button not found, scroll more\n      if (!registerButton || !(await registerButton.isDisplayed())) {\n        console.log('üîÑ Scrolling more to find register button...');\n        \n        await driver.performActions([{\n          type: 'pointer',\n          id: 'finger1',\n          parameters: { pointerType: 'touch' },\n          actions: [\n            { type: 'pointerMove', duration: 0, x: 540, y: 1800 },\n            { type: 'pointerDown', button: 0 },\n            { type: 'pause', duration: 100 },\n            { type: 'pointerMove', duration: 1000, x: 540, y: 600 },\n            { type: 'pointerUp', button: 0 }\n          ]\n        }]);\n        await driver.pause(1500);\n        \n        // Try register button selectors again\n        for (const selector of registerButtonSelectors) {\n          try {\n            registerButton = await $(selector);\n            if (await registerButton.isDisplayed()) {\n              console.log(`‚úÖ Register button found with selector: ${selector} after scroll`);\n              break;\n            }\n          } catch (error) {\n            // Continue to next selector\n          }\n        }\n      }\n      \n      // Verify register button\n      if (registerButton && await registerButton.isDisplayed()) {\n        console.log('‚úÖ Register button is visible and ready for interaction');\n        const buttonText = await registerButton.getText();\n        console.log(`üìù Register button text: ${buttonText}`);\n      } else {\n        console.log('‚ùå Register button not found');\n      }\n    }\n    \n    console.log('üîê Password Field Test completed');\n  }","events":[],"errorIndex":0}],"hooks":[],"suites":[],"parent":"","retries":0,"hooksAndTests":[{"start":"2025-06-20T15:31:46.799Z","end":"2025-06-20T15:33:17.472Z","_duration":90673,"type":"test","uid":"test-00-0","cid":"0-0","title":"should find password field by scrolling and capture source","fullTitle":"Password Field Test.should find password field by scrolling and capture source","output":[],"retries":0,"parent":"Password Field Test","state":"passed","body":"async () => {\n    console.log('üîê Starting Password Field Test');\n    \n    // Wait for app to load\n    await driver.pause(3000);\n    \n    // Handle First Name field first\n    console.log('\\nüë§ Testing First Name field...');\n    \n    try {\n      // Find First Name field by looking for the EditText with first name hint\n      const firstNameField = await $('//android.widget.EditText[@hint=\"e.g. John\"]');\n      if (await firstNameField.isDisplayed()) {\n        console.log('‚úÖ First Name field found');\n        \n        // Test first name field interaction\n        await firstNameField.click();\n        await driver.pause(500);\n        await firstNameField.clearValue();\n        await driver.pause(500);\n        await firstNameField.setValue('John');\n        await driver.pause(1000);\n        \n        console.log('‚úÖ First Name field interaction completed');\n        \n        // Click on \"Registration\" text at the top to exit editing mode\n        console.log('\\nüì± Clicking on Registration text to exit editing mode...');\n        try {\n          const registrationText = await $('~Registration');\n          await registrationText.click();\n          await driver.pause(1000);\n          console.log('‚úÖ Clicked on Registration text to exit editing mode');\n        } catch (error) {\n          console.log('‚ö†Ô∏è Could not click on Registration text:', error.message);\n        }\n        \n      } else {\n        console.log('‚ö†Ô∏è First Name field not found');\n      }\n    } catch (error) {\n      console.log('‚ö†Ô∏è Error filling First Name field:', error.message);\n    }\n    \n    // Handle Last Name field\n    console.log('\\nüë§ Testing Last Name field...');\n    \n    try {\n      // Find Last Name field by looking for the EditText with last name hint\n      const lastNameField = await $('//android.widget.EditText[@hint=\"e.g. Doe\"]');\n      if (await lastNameField.isDisplayed()) {\n        console.log('‚úÖ Last Name field found');\n        \n        // Test last name field interaction\n        await lastNameField.click();\n        await driver.pause(500);\n        await lastNameField.clearValue();\n        await driver.pause(500);\n        await lastNameField.setValue('Doe');\n        await driver.pause(1000);\n        \n        console.log('‚úÖ Last Name field interaction completed');\n        \n        // Click on \"Registration\" text at the top to exit editing mode\n        console.log('\\nüì± Clicking on Registration text to exit editing mode...');\n        try {\n          const registrationText = await $('~Registration');\n          await registrationText.click();\n          await driver.pause(1000);\n          console.log('‚úÖ Clicked on Registration text to exit editing mode');\n        } catch (error) {\n          console.log('‚ö†Ô∏è Could not click on Registration text:', error.message);\n        }\n        \n      } else {\n        console.log('‚ö†Ô∏è Last Name field not found');\n      }\n    } catch (error) {\n      console.log('‚ö†Ô∏è Error filling Last Name field:', error.message);\n    }\n    \n    // Handle Email Address field first\n    console.log('\\nüìß Testing Email Address field...');\n    \n    try {\n      // Find Email Address field by looking for the EditText with email hint\n      const emailField = await $('//android.widget.EditText[@hint=\"e.g. johndoe@mail.com\"]');\n      if (await emailField.isDisplayed()) {\n        console.log('‚úÖ Email Address field found');\n        \n        // Test email field interaction\n        await emailField.click();\n        await driver.pause(500);\n        await emailField.clearValue();\n        await driver.pause(500);\n        await emailField.setValue('test@example.com');\n        await driver.pause(1000);\n        \n        console.log('‚úÖ Email field interaction completed');\n        \n        // Click on \"Registration\" text at the top to exit editing mode\n        console.log('\\nüì± Clicking on Registration text to exit editing mode...');\n        try {\n          const registrationText = await $('~Registration');\n          await registrationText.click();\n          await driver.pause(1000);\n          console.log('‚úÖ Clicked on Registration text to exit editing mode');\n        } catch (error) {\n          console.log('‚ö†Ô∏è Could not click on Registration text:', error.message);\n        }\n        \n      } else {\n        console.log('‚ö†Ô∏è Email Address field not found');\n      }\n    } catch (error) {\n      console.log('‚ö†Ô∏è Error filling Email Address field:', error.message);\n    }\n    \n    // Test Phone Number field first\n    console.log('\\nüìû Testing Phone Number field...');\n    \n    try {\n      // Find Phone Number field\n      const phoneField = await $('//android.widget.EditText[@hint=\"+1 \\n9876543210\"]');\n      if (await phoneField.isDisplayed()) {\n        console.log('‚úÖ Phone Number field found');\n        \n        // Click on the field\n        await phoneField.click();\n        await driver.pause(500);\n        console.log('‚úÖ Phone field clicked');\n        \n        // Clear and enter phone number\n        await phoneField.clearValue();\n        await phoneField.setValue('5551234567');\n        await driver.pause(1000);\n        console.log('‚úÖ Phone number entered: 5551234567');\n        \n        // Click on Registration header to exit\n        const registrationText = await $('~Registration');\n        await registrationText.click();\n        await driver.pause(1000);\n        console.log('‚úÖ Clicked on Registration text to exit');\n        \n        console.log('‚úÖ Phone Number Field Test completed successfully');\n        \n      } else {\n        console.log('‚ùå Phone Number field not found');\n      }\n    } catch (error) {\n      console.log('‚ùå Error testing Phone Number field:', error.message);\n    }\n    \n    // First, handle Address field on main screen\n    console.log('\\nüè† Testing Address field...');\n    \n    try {\n      // Find Address field by looking for the EditText with \"Street Address\" hint\n      const addressField = await $('//android.widget.EditText[@hint=\"Street Address\"]');\n      if (await addressField.isDisplayed()) {\n        console.log('‚úÖ Address field found');\n        \n        // Test address field interaction\n        await addressField.click();\n        await driver.pause(500);\n        await addressField.clearValue();\n        await driver.pause(500);\n        await addressField.setValue('123 Main Street, Apt 4B');\n        await driver.pause(1000);\n        \n        console.log('‚úÖ Address field interaction completed');\n        \n        // Click on \"Registration\" text at the top to exit editing mode\n        console.log('\\nüì± Clicking on Registration text to exit editing mode...');\n        try {\n          const registrationText = await $('~Registration');\n          await registrationText.click();\n          await driver.pause(1000);\n          console.log('‚úÖ Clicked on Registration text to exit editing mode');\n        } catch (error) {\n          console.log('‚ö†Ô∏è Could not click on Registration text:', error.message);\n        }\n        \n      } else {\n        console.log('‚ö†Ô∏è Address field not found');\n      }\n    } catch (error) {\n      console.log('‚ö†Ô∏è Error filling Address field:', error.message);\n    }\n    \n    // First, verify Country field is set to United States and not editable\n    console.log('\\nüåç Verifying Country field...');\n    \n    try {\n      const countryField = await $('//android.view.View[@text=\"United States\"]');\n      if (await countryField.isDisplayed()) {\n        console.log('‚úÖ Country field found and set to \"United States\"');\n        \n        // Verify it's not editable (should be disabled)\n        const isEnabled = await countryField.getAttribute('enabled');\n        if (isEnabled === 'false') {\n          console.log('‚úÖ Country field is correctly disabled (not editable)');\n        } else {\n          console.log('‚ö†Ô∏è Country field appears to be editable');\n        }\n      } else {\n        console.log('‚ö†Ô∏è Country field not found or not set to \"United States\"');\n      }\n    } catch (error) {\n      console.log('‚ö†Ô∏è Error verifying Country field:', error.message);\n    }\n    \n    // First, test SSN/TIN field - it's visible after first scroll\n    console.log('\\nüÜî Testing SSN/TIN field first...');\n    \n    // Scroll down once to bring SSN/TIN field into view\n    console.log('üîÑ Scrolling down to bring SSN/TIN field into view...');\n    \n    await driver.performActions([{\n      type: 'pointer',\n      id: 'finger1',\n      parameters: { pointerType: 'touch' },\n      actions: [\n        { type: 'pointerMove', duration: 0, x: 540, y: 1800 },\n        { type: 'pointerDown', button: 0 },\n        { type: 'pause', duration: 100 },\n        { type: 'pointerMove', duration: 1000, x: 540, y: 600 },\n        { type: 'pointerUp', button: 0 }\n      ]\n    }]);\n    await driver.releaseActions();\n    await driver.pause(1500);\n    \n    // UPDATED STATE DROPDOWN LOGIC - using working approach from state-dropdown-test.e2e.js\n    console.log('\\nüèõÔ∏è Testing State dropdown...');\n    \n    try {\n      // Use the exact content-desc from page source (working approach)\n      const stateDropdown = await $('~Select State');\n      await stateDropdown.waitForDisplayed({ timeout: 10000});\n      console.log('‚úÖ State dropdown found and displayed');\n      \n      // Click the State dropdown\n      await stateDropdown.click();\n      console.log('‚úÖ State dropdown clicked');\n      await driver.pause(5000);\n      \n      // Look for dropdown options using content-desc (as seen in page source)\n      const stateOptions = await $$('android=new UiSelector().className(\"android.view.View\").clickable(true)');\n      console.log(`üîç Found ${stateOptions.length} potential state options`);\n      \n      // Filter for actual state options (those with content-desc containing state names)\n      const availableStates = [];\n      for (let i = 0; i < stateOptions.length; i++) {\n        try {\n          const contentDesc = await stateOptions[i].getAttribute('content-desc');\n          if (contentDesc && contentDesc.length > 0 && contentDesc !== 'Scrim') {\n            availableStates.push({\n              element: stateOptions[i],\n              name: contentDesc\n            });\n          }\n        } catch (error) {\n          // Skip elements that don't have content-desc\n        }\n      }\n      \n      console.log(`üìã Available states: ${availableStates.map(s => s.name).join(', ')}`);\n      \n      if (availableStates.length > 0) {\n        // Select a random state (or the first one)\n        const selectedStateIndex = Math.floor(Math.random() * availableStates.length);\n        const selectedState = availableStates[selectedStateIndex];\n        \n        await selectedState.element.click();\n        console.log(`‚úÖ Selected State: ${selectedState.name}`);\n      } else {\n        console.log('‚ö†Ô∏è No state options found with content-desc');\n        \n        // Fallback: try to click any clickable option\n        const clickableOptions = await $$('android=new UiSelector().className(\"android.view.View\").clickable(true)');\n        if (clickableOptions.length > 0) {\n          // Skip the first one (usually the scrim/overlay)\n          const optionToClick = clickableOptions.length > 1 ? clickableOptions[1] : clickableOptions[0];\n          await optionToClick.click();\n          console.log('‚úÖ Selected a state option (fallback method)');\n        } else {\n          console.log('‚ùå No clickable options found');\n        }\n      }\n      \n    } catch (error) {\n      console.log('‚ùå Failed to interact with State dropdown:', error.message);\n    }\n\n    // Handle City dropdown that may appear after State selection\n    console.log('\\nüèôÔ∏è Checking for City dropdown after State selection...');\n    await driver.pause(5000); // Wait for City dropdown to appear\n    \n    try {\n      const cityDropdown = await $('~Select City');\n      if (await cityDropdown.isDisplayed()) {\n        console.log('‚úÖ City dropdown found, selecting city...');\n        await cityDropdown.click();\n        await driver.pause(10000);\n        const cityOptions = await $$('android=new UiSelector().className(\"android.view.View\").clickable(true)');\n        console.log(`üîç Found ${cityOptions.length} potential city options`);\n        \n        // Filter for actual city options\n        const availableCities = [];\n        for (let i = 0; i < cityOptions.length; i++) {\n          try {\n            const contentDesc = await cityOptions[i].getAttribute('content-desc');\n            if (contentDesc && contentDesc.length > 0 && contentDesc !== 'Scrim') {\n              availableCities.push({\n                element: cityOptions[i],\n                name: contentDesc\n              });\n            }\n          } catch (error) {\n            // Skip elements that don't have content-desc\n          }\n        }\n        \n        console.log(`üìã Available cities: ${availableCities.map(c => c.name).join(', ')}`);\n        \n        if (availableCities.length > 0) {\n          // Select a random city (or the first one)\n          const selectedCityIndex = Math.floor(Math.random() * availableCities.length);\n          const selectedCity = availableCities[selectedCityIndex];\n          \n          await selectedCity.element.click();\n          console.log(`‚úÖ Selected City: ${selectedCity.name}`);\n        } else {\n          console.log('‚ö†Ô∏è No city options found with content-desc');\n          \n          // Fallback: try to click any clickable option\n          const clickableOptions = await $$('android=new UiSelector().className(\"android.view.View\").clickable(true)');\n          if (clickableOptions.length > 0) {\n            const optionToClick = clickableOptions.length > 1 ? clickableOptions[1] : clickableOptions[0];\n            await optionToClick.click();\n            console.log('‚úÖ Selected a city option (fallback method)');\n          } else {\n            console.log('‚ùå No clickable city options found');\n          }\n        }\n      } else {\n        console.log('‚ÑπÔ∏è City dropdown not found after state selection - this is normal for some states');\n      }\n    } catch (error) {\n      console.log('‚ÑπÔ∏è City dropdown not present - this is normal for some states');\n    }\n    \n    // First, handle Zip field - it should be visible after this scroll\n    console.log('\\nüìÆ Testing Zip Code field...');\n    \n    // Try to find zip field using the same approach as SSN/TIN\n    let zipField = null;\n    try {\n      // Find Zip Code field by looking for the EditText after the \"Zip Code *\" label\n      const zipLabel = await $('//android.view.View[@content-desc=\"Zip Code *\"]');\n      if (await zipLabel.isDisplayed()) {\n        console.log('‚úÖ Zip Code label found');\n        \n        // Find the EditText that follows this label\n        zipField = await $('//android.view.View[@content-desc=\"Zip Code *\"]/following-sibling::android.widget.EditText[1]');\n        if (await zipField.isDisplayed()) {\n          console.log('üìù Found Zip Code field using content-desc locator');\n          \n          // Test zip field interaction\n          await zipField.click();\n          await driver.pause(500);\n          await zipField.clearValue();\n          await driver.pause(500);\n          await zipField.setValue('12345');\n          await driver.pause(1000);\n          \n          console.log('‚úÖ Zip field interaction completed');\n        } else {\n          console.log('‚ö†Ô∏è Zip Code field not found after label');\n        }\n      } else {\n        console.log('‚ö†Ô∏è Zip Code label not found after first scroll');\n      }\n    } catch (error) {\n      console.log('‚ö†Ô∏è Error filling Zip Code:', error.message);\n    }\n    \n    // Test SSN/TIN field using the correct logic from fill-and-submit-registration-form.e2e.js\n    console.log('üÜî Looking for SSN/TIN field...');\n    \n    try {\n      // Find SS#/TIN# field by looking for the EditText after the \"SS#/TIN# *\" label\n      const ssnLabel = await $('//android.view.View[@content-desc=\"SS#/TIN# *\"]');\n      if (await ssnLabel.isDisplayed()) {\n        console.log('‚úÖ SS#/TIN# label found');\n        \n        // Find the EditText that follows this label - it's the next EditText after the label\n        const ssnField = await $('//android.view.View[@content-desc=\"SS#/TIN# *\"]/following-sibling::android.widget.EditText[1]');\n        if (await ssnField.isDisplayed()) {\n          console.log('üìù Found SS#/TIN# field using content-desc locator');\n          \n          // Click on SSN/TIN field\n          await ssnField.click();\n          await driver.pause(500);\n          \n          // Clear and enter SSN/TIN\n          await ssnField.clearValue();\n          await driver.pause(500);\n          await ssnField.clearValue();\n          await ssnField.setValue('123-45-6789');\n          await driver.pause(1000);\n          \n          console.log('‚úÖ SS#/TIN# filled successfully: 123-45-6789');\n          \n          // Simple validation - just check if we can still find the SS#/TIN# label\n          const stillOnForm = await $('//android.view.View[@content-desc=\"SS#/TIN# *\"]').isDisplayed().catch(() => false);\n          if (!stillOnForm) {\n            console.log('‚ö†Ô∏è Form may have navigated away after SSN/TIN entry');\n          } else {\n            console.log('‚úÖ Form still visible after SSN/TIN entry');\n          }\n          \n        } else {\n          console.log('‚ö†Ô∏è SS#/TIN# field not found after label');\n        }\n      } else {\n        console.log('‚ö†Ô∏è SS#/TIN# label not found after first scroll');\n      }\n    } catch (error) {\n      console.log('‚ö†Ô∏è Error filling SS#/TIN#:', error.message);\n    }\n    \n    // Now test Residence Status dropdown\n    console.log('\\nüìã Testing Residence Status dropdown...');\n    \n    // Scroll down multiple times to bring Residence Status dropdown into view\n    console.log('üîÑ Scrolling to bring Residence Status dropdown into view...');\n    \n    // Second scroll to go further down\n    await driver.performActions([{\n      type: 'pointer',\n      id: 'finger1',\n      parameters: { pointerType: 'touch' },\n      actions: [\n        { type: 'pointerMove', duration: 0, x: 540, y: 1800 },\n        { type: 'pointerDown', button: 0 },\n        { type: 'pause', duration: 100 },\n        { type: 'pointerMove', duration: 1000, x: 540, y: 600 },\n        { type: 'pointerUp', button: 0 }\n      ]\n    }]);\n    await driver.releaseActions();\n    await driver.pause(1500);\n\n    // Third scroll to ensure we're at the bottom\n    await driver.performActions([{\n      type: 'pointer',\n      id: 'finger1',\n      parameters: { pointerType: 'touch' },\n      actions: [\n        { type: 'pointerMove', duration: 0, x: 540, y: 1800 },\n        { type: 'pointerDown', button: 0 },\n        { type: 'pause', duration: 100 },\n        { type: 'pointerMove', duration: 1000, x: 540, y: 600 },\n        { type: 'pointerUp', button: 0 }\n      ]\n    }]);\n    await driver.releaseActions();\n    await driver.pause(2000);\n    \n    // Try to find Residence Status dropdown using different locators\n    let residenceDropdown = null;\n    \n    // Try content-desc first\n    try {\n      residenceDropdown = await $('~Select Residence Status');\n      await residenceDropdown.waitForDisplayed({ timeout: 5000});\n      console.log('‚úÖ Residence Status dropdown found using content-desc');\n    } catch (error) {\n      console.log('‚ö†Ô∏è Not found with content-desc, trying hint text...');\n      // Try hint text\n      try {\n        residenceDropdown = await $('android=new UiSelector().text(\"Select Residence Status\")');\n        await residenceDropdown.waitForDisplayed({ timeout: 5000});\n        console.log('‚úÖ Residence Status dropdown found using text');\n      } catch (error2) {\n        console.log('‚ö†Ô∏è Not found with text, trying hint...');\n        // Try hint\n        try {\n          residenceDropdown = await $('android=new UiSelector().textContains(\"Residence\")');\n          await residenceDropdown.waitForDisplayed({ timeout: 5000});\n          console.log('‚úÖ Residence Status dropdown found using textContains');\n        } catch (error3) {\n          console.log('‚ùå Residence Status dropdown not found with any locator');\n        }\n      }\n    }\n    \n    if (residenceDropdown && await residenceDropdown.isDisplayed()) {\n      // Click the Residence Status dropdown\n      await residenceDropdown.click();\n      console.log('‚úÖ Residence Status dropdown clicked');\n      await driver.pause(5000);\n      \n      // Look for dropdown options using content-desc (as seen in page source)\n      const residenceOptions = await $$('android=new UiSelector().className(\"android.view.View\").clickable(true)');\n      console.log(`üîç Found ${residenceOptions.length} potential residence options`);\n      \n      // Filter for actual residence options (those with content-desc containing residence status names)\n      const availableResidenceStatuses = [];\n      for (let i = 0; i < residenceOptions.length; i++) {\n        try {\n          const contentDesc = await residenceOptions[i].getAttribute('content-desc');\n          if (contentDesc && contentDesc.length > 0 && contentDesc !== 'Scrim') {\n            availableResidenceStatuses.push({\n              element: residenceOptions[i],\n              name: contentDesc\n            });\n          }\n        } catch (error) {\n          // Skip elements that don't have content-desc\n        }\n      }\n      \n      console.log(`üìã Available residence statuses: ${availableResidenceStatuses.map(s => s.name).join(', ')}`);\n      \n      if (availableResidenceStatuses.length > 0) {\n        // Select a random residence status (or the first one)\n        const selectedResidenceIndex = Math.floor(Math.random() * availableResidenceStatuses.length);\n        const selectedResidence = availableResidenceStatuses[selectedResidenceIndex];\n        \n        await selectedResidence.element.click();\n        console.log(`‚úÖ Selected Residence Status: ${selectedResidence.name}`);\n      } else {\n        console.log('‚ö†Ô∏è No residence status options found with content-desc');\n        \n        // Fallback: try to click any clickable option\n        const clickableOptions = await $$('android=new UiSelector().className(\"android.view.View\").clickable(true)');\n        if (clickableOptions.length > 0) {\n          // Skip the first one (usually the scrim/overlay)\n          const optionToClick = clickableOptions.length > 1 ? clickableOptions[1] : clickableOptions[0];\n          await optionToClick.click();\n          console.log('‚úÖ Selected a residence status option (fallback method)');\n        } else {\n          console.log('‚ùå No clickable options found');\n        }\n      }\n    } else {\n      console.log('‚ùå Residence Status dropdown not found or not visible');\n    }\n    \n    // Now scroll down to find password field\n    console.log('\\nüìú Looking for password field...');\n    \n    // First try to find password field without scrolling\n    const passwordSelectors = [\n      '~Password',\n      '~password',\n      '//android.widget.EditText[@hint=\"Password\"]',\n      '//android.widget.EditText[@hint=\"********\"]',\n      '//android.widget.EditText[@password=\"true\"]'\n    ];\n\n    let passwordField = null;\n    \n    // Try all selectors without scrolling first\n    for (const selector of passwordSelectors) {\n      try {\n        passwordField = await $(selector);\n        if (await passwordField.isDisplayed()) {\n          console.log(`‚úÖ Password field found with selector: ${selector}`);\n          break;\n        }\n      } catch (error) {\n        // Continue to next selector\n      }\n    }\n\n    // If password field not found, do a single scroll to bring all fields into view\n    if (!passwordField || !(await passwordField.isDisplayed())) {\n      console.log('üîÑ Scrolling once to bring all fields into view...');\n      \n      await driver.performActions([{\n        type: 'pointer',\n        id: 'finger1',\n        parameters: { pointerType: 'touch' },\n        actions: [\n          { type: 'pointerMove', duration: 0, x: 540, y: 1800 },\n          { type: 'pointerDown', button: 0 },\n          { type: 'pause', duration: 100 },\n          { type: 'pointerMove', duration: 1000, x: 540, y: 600 },\n          { type: 'pointerUp', button: 0 }\n        ]\n      }]);\n      await driver.pause(1500);\n\n      // Try all selectors again after scroll\n      for (const selector of passwordSelectors) {\n        try {\n          passwordField = await $(selector);\n          if (await passwordField.isDisplayed()) {\n            console.log(`‚úÖ Password field found with selector: ${selector} after scroll`);\n            break;\n          }\n        } catch (error) {\n          // Continue to next selector\n        }\n      }\n    }\n    \n    // Try finding password field again after scroll\n    if (!passwordField) {\n      console.log('üîÑ Trying password field selectors again after scroll...');\n      for (const selector of passwordSelectors) {\n        try {\n          passwordField = await $(selector);\n          if (await passwordField.isDisplayed()) {\n            console.log(`‚úÖ Password field found with selector: ${selector} after retry`);\n            break;\n          }\n        } catch (error) {\n          // Continue to next selector\n        }\n      }\n    }\n    \n    if (!passwordField) {\n      console.log('‚ùå Password field not found after scrolling');\n    } else {\n      console.log('‚úÖ Password field found and ready for interaction');\n      \n      // Test password field interaction\n      await passwordField.click();\n      await driver.pause(500);\n      await passwordField.setValue('TestPassword123');\n      await driver.pause(1000);\n      \n      // Close keyboard after password field\n      await driver.hideKeyboard();\n      await driver.pause(500);\n      console.log('‚úÖ Password field interaction completed and keyboard closed');\n      \n      // Now look for confirm password field\n      console.log('\\nüîê Looking for confirm password field...');\n      let confirmPasswordField = null;\n      \n      const confirmSelectors = [\n        '~Confirm Password',\n        '~confirm password',\n        '~ConfirmPassword',\n        '//android.widget.EditText[@hint=\"Confirm Password\"]',\n        '//android.widget.EditText[@hint=\"********\"]',\n        '//android.widget.EditText[@content-desc=\"Confirm Password\"]'\n      ];\n      \n      // Try to find confirm password field\n      for (const selector of confirmSelectors) {\n        try {\n          confirmPasswordField = await $(selector);\n          if (await confirmPasswordField.isDisplayed()) {\n            console.log(`‚úÖ Confirm password field found with selector: ${selector}`);\n            break;\n          }\n        } catch (error) {\n          // Continue to next selector\n        }\n      }\n      \n      // If confirm password field not found, scroll more\n      if (!confirmPasswordField || !(await confirmPasswordField.isDisplayed())) {\n        console.log('üîÑ Scrolling more to find confirm password field...');\n        \n        await driver.performActions([{\n          type: 'pointer',\n          id: 'finger1',\n          parameters: { pointerType: 'touch' },\n          actions: [\n            { type: 'pointerMove', duration: 0, x: 540, y: 1800 },\n            { type: 'pointerDown', button: 0 },\n            { type: 'pause', duration: 100 },\n            { type: 'pointerMove', duration: 1000, x: 540, y: 600 },\n            { type: 'pointerUp', button: 0 }\n          ]\n        }]);\n        await driver.pause(1500);\n        \n        // Try confirm password selectors again\n        for (const selector of confirmSelectors) {\n          try {\n            confirmPasswordField = await $(selector);\n            if (await confirmPasswordField.isDisplayed()) {\n              console.log(`‚úÖ Confirm password field found with selector: ${selector} after scroll`);\n              break;\n            }\n          } catch (error) {\n            // Continue to next selector\n          }\n        }\n      }\n      \n      // Test confirm password field interaction\n      if (confirmPasswordField && await confirmPasswordField.isDisplayed()) {\n        console.log('‚úÖ Confirm password field found and ready for interaction');\n        \n        await confirmPasswordField.click();\n        await driver.pause(500);\n        await confirmPasswordField.setValue('TestPassword123');\n        await driver.pause(1000);\n        \n        // Close keyboard after confirm password field\n        await driver.hideKeyboard();\n        await driver.pause(500);\n        console.log('‚úÖ Confirm password field interaction completed and keyboard closed');\n      } else {\n        console.log('‚ùå Confirm password field not found');\n      }\n      \n      // Now verify register button is visible\n      console.log('\\nüîò Looking for register button...');\n      let registerButton = null;\n      \n      const registerButtonSelectors = [\n        '~Register',\n        '~register',\n        '~Submit',\n        '~submit',\n        '//android.widget.Button[@text=\"Register\"]',\n        '//android.widget.Button[@text=\"Submit\"]',\n        '//android.widget.Button[contains(@text, \"Register\")]',\n        '//android.widget.Button[contains(@text, \"Submit\")]'\n      ];\n      \n      // Try to find register button\n      for (const selector of registerButtonSelectors) {\n        try {\n          registerButton = await $(selector);\n          if (await registerButton.isDisplayed()) {\n            console.log(`‚úÖ Register button found with selector: ${selector}`);\n            break;\n          }\n        } catch (error) {\n          // Continue to next selector\n        }\n      }\n      \n      // If register button not found, scroll more\n      if (!registerButton || !(await registerButton.isDisplayed())) {\n        console.log('üîÑ Scrolling more to find register button...');\n        \n        await driver.performActions([{\n          type: 'pointer',\n          id: 'finger1',\n          parameters: { pointerType: 'touch' },\n          actions: [\n            { type: 'pointerMove', duration: 0, x: 540, y: 1800 },\n            { type: 'pointerDown', button: 0 },\n            { type: 'pause', duration: 100 },\n            { type: 'pointerMove', duration: 1000, x: 540, y: 600 },\n            { type: 'pointerUp', button: 0 }\n          ]\n        }]);\n        await driver.pause(1500);\n        \n        // Try register button selectors again\n        for (const selector of registerButtonSelectors) {\n          try {\n            registerButton = await $(selector);\n            if (await registerButton.isDisplayed()) {\n              console.log(`‚úÖ Register button found with selector: ${selector} after scroll`);\n              break;\n            }\n          } catch (error) {\n            // Continue to next selector\n          }\n        }\n      }\n      \n      // Verify register button\n      if (registerButton && await registerButton.isDisplayed()) {\n        console.log('‚úÖ Register button is visible and ready for interaction');\n        const buttonText = await registerButton.getText();\n        console.log(`üìù Register button text: ${buttonText}`);\n      } else {\n        console.log('‚ùå Register button not found');\n      }\n    }\n    \n    console.log('üîê Password Field Test completed');\n  }","events":[],"errorIndex":0}]}],"reportFile":"D:\\Work\\flutter-app-automation\\reports\\html-reports\\report-0-0.html","browserName":"not specified"}